name: "Terraform"
on:
  push:
    branches: ["main"]
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION_DEFAULT: us-east-1
  CLUSTER_NAME: tech-challenge-lanchonete
  S3_BACKEND_BUCKET_NAME: tcl-terraform-bucket-vitorrafael

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v4
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  terraform-backend:
    name: "Terraform Backend"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION_DEFAULT }}

      - name: Check S3 Bucket Existence
        id: check-bucket
        run: |
          if aws s3api head-bucket --bucket "${{ env.S3_BACKEND_BUCKET_NAME }}" 2>/dev/null; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=eks/backend init

      - name: Terraform Apply
        if: env.exists == 'false' && github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=eks/backend apply -auto-approve -input=false

  terraform-eks:
    name: "Terraform EKS"
    needs: terraform-backend
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION_DEFAULT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=eks init

      - name: Terraform Format
        run: terraform -chdir=eks fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=eks validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          TF_VAR_accountId: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform -chdir=eks plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_accountId: ${{ secrets.AWS_ACCOUNT_ID }}
        run: terraform -chdir=eks apply -auto-approve -input=false

  ingress-controller:
    if: github.ref == 'refs/heads/main'
    name: "Setup Ingress Controller"
    needs: terraform-eks
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION_DEFAULT }}

      - name: Connect to AWS EKS Cluster
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION_DEFAULT }}

      - name: Install Helm
        id: helm-install
        uses: azure/setup-helm@v3

      - name: Configure Helm Repository
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      
      - name: Install Ingress Controller
        run: |
          helm upgrade -i ingress-nginx ingress-nginx/ingress-nginx \
            --version 4.2.3 \
            --namespace kube-system \
            --set controller.serviceType=LoadBalancer \
            --set controller.ingressClassResource.default=true

  ingress:
    if: github.ref == 'refs/heads/main'
    name: "Setup Ingress"
    needs: ingress-controller
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION_DEFAULT }}

      - name: Connect to AWS EKS Cluster
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION_DEFAULT }}

      - name: Apply Ingress Configuration
        run: |
          kubectl apply -f k8s/ingress.yaml