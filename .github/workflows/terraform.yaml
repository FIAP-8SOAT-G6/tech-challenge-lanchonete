name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  pull_request:
  pull_request_target:

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION_DEFAULT: us-east-1
  AWS_ECR_REPOSITORY: tech-challenge-lanchonete/lanchonete-api

jobs:
  terraform-backend:
    name: 'Terraform Backend'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION_DEFAULT }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: "[Backend] Terraform Init"
      run: terraform -chdir=infra/backend init

    - name: "[Backend] Terraform Plan"
      id: backend-plan
      if: github.event_name == 'pull_request'
      run: terraform -chdir=infra/backend plan -no-color -input=false
      continue-on-error: true

    - name: "[Backend] Update Pull Request"
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        BACKEND_PLAN: ${{ steps.backend-plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Backend
          #### Terraform Backend Plan üìñ\`${{ steps.backend-plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.BACKEND_PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: "[Backend] Terraform Apply"
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=infra/backend apply -auto-approve -input=false

  terraform-ecr:
    name: "Terraform AWS Elastic Container Registry"
    runs-on: ubuntu-latest
    environment: production

    needs:
      - terraform-backend

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION_DEFAULT }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform -chdir=infra init
    
    - name: Terraform Format
      run: terraform -chdir=infra  fmt -check
    
    - name: Terraform Validate
      id: validate
      run: terraform -chdir=infra  validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform -chdir=infra  plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=infra apply -auto-approve -input=false

  docker-build-and-push:
    name: "Docker - Build & Push to ECR"
    needs: terraform-ecr
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION_DEFAULT }}

      - name: Login To Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Tag Image
        id: build-image
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:latest . -f Dockerfile.prod

      - name: Push Image
        id: push-image
        env:
          AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:latest