apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      automountServiceAccountToken: false
      initContainers:
        - name: wait-for-database
          image: alpine
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
          command:
            [
              "sh",
              "-c",
              'until nc -z $DATABASE_HOST $DATABASE_PORT; do echo "waiting for database"; sleep 5; done; echo "Database is up!"',
            ]
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
            - secretRef:
                name: {{ .Release.Name }}-secret
          ports:
            - containerPort: 8080
          # livenessProbe:
          #   httpGet:
          #     path: /health/liveness
          #     port: 8080
          #   periodSeconds: 10
          #   failureThreshold: 3
          #   initialDelaySeconds: 20
          # readinessProbe:
          #   httpGet:
          #     path: /health/readiness
          #     port: 8080
          #   periodSeconds: 10
          #   failureThreshold: 5
          #   initialDelaySeconds: 3
          resources:
            requests:
              memory: "{{ .Values.resources.requests.memory }}"
              cpu: "{{ .Values.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
              cpu: "{{ .Values.resources.limits.cpu }}"
